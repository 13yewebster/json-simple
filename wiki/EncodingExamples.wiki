#summary Examples of JSON encoding
<wiki:toc/>
====Example 1 - Encode a JSON object====
   {{{
  //import org.json.simple.JSONObject;
  
  JSONObject obj=new JSONObject();
  obj.put("name","foo");
  obj.put("num",new Integer(100));
  obj.put("balance",new Double(1000.21));
  obj.put("is_vip",new Boolean(true));
  obj.put("nickname",null);
  System.out.print(obj);
   }}} 
  Result: {"balance":1000.21,"num":100,"nickname":null,"is_vip":true,"name":"foo"}

====Example 2 - Encode a JSON array====
   {{{
  //import org.json.simple.JSONArray;
  
  JSONArray list = new JSONArray();
  list.add("foo");
  list.add(new Integer(100));
  list.add(new Double(1000.21));
  list.add(new Boolean(true));
  list.add(null);
  System.out.print(list);
   }}} 
  Result: ["foo",100,1000.21,true,null]

====Example 3 - Merge two JSON objects====
   {{{
  //import org.json.simple.JSONObject;
  
  JSONObject obj1 = new JSONObject();
  obj1.put("name","foo");
  obj1.put("num",new Integer(100));
  obj1.put("balance",new Double(1000.21));
  		
  JSONObject obj2 = new JSONObject();
  obj2.put("is_vip",new Boolean(true));
  obj2.put("nickname",null);
  obj2.putAll(obj1);
  System.out.print(obj2);
   }}} 
  Result: {"balance":1000.21,"num":100,"nickname":null,"is_vip":true,"name":"foo"}, the same as the one of Example 1.

====Example 4 - Merge two JSON arrays====
   {{{
  JSONArray list1 = new JSONArray();
  list1.add("foo");
  list1.add(new Integer(100));
  list1.add(new Double(1000.21));
  
  JSONArray list2 = new JSONArray();
  list2.add(new Boolean(true));
  list2.add(null);
  list2.addAll(list1);
  System.out.print(list2);
   }}}
  Result: [true,null,"foo",100,1000.21], the order of which is different from the one of Example 2.

====Example 5 - Combination of JSON primitives, JSON object and JSON arrays====
   {{{
  JSONArray list1 = new JSONArray();
  list1.add("foo");
  list1.add(new Integer(100));
  list1.add(new Double(1000.21));
  
  JSONArray list2 = new JSONArray();
  list2.add(new Boolean(true));
  list2.add(null);
		
  JSONObject obj = new JSONObject();
  obj.put("name","foo");
  obj.put("num",new Integer(100));
  obj.put("balance",new Double(1000.21));
  obj.put("is_vip",new Boolean(true));
  obj.put("nickname",null);
    
  obj.put("list1", list1);
  obj.put("list2", list2);
		
  System.out.println(obj);
   }}}
  Result: {"balance":1000.21,"list2":[true,null],"num":100,"list1":["foo",100,1000.21],"nickname":null,"is_vip":true,"name":"foo"}

====Example 6 - Customize JSON outputs====
  {{{
/*class User implements JSONAware{
	private int id;
	private String name;
	private String password;
	
	public User(int id, String name, String password){
		this.id = id;
		this.name = name;
		this.password = password;
	}
	
	public String toJSONString(){
		StringBuffer sb = new StringBuffer();
		
		sb.append("{");
		
		sb.append(JSONObject.escape("userName"));
		sb.append(":");
		sb.append("\"" + JSONObject.escape(name) + "\"");
		
		sb.append(",");
		
		sb.append(JSONObject.escape("ID"));
		sb.append(":");
		sb.append(id);
		
		sb.append("}");
		
		return sb.toString();
	}
}*/

  JSONArray users = new JSONArray();
  users.add(new User(123,"foo1", "secret1"));
  users.add(new User(124,"foo2", "secret2"));
  users.add(new User(125,"\"foo2\"", "secret2"));
  System.out.println(users);
  }}}
  Result: [{userName:"foo1",ID:123},{userName:"foo2",ID:124},{userName:"\"foo2\"",ID:125}]

  User.toJSONString() seems to be a bit complicated. The purpose is to demonstrate the usage of JSONObject.escape(). It can be simpler:
  {{{
  public String toJSONString(){
    JSONObject obj = new JSONObject();
    obj.put("userName", name);
    obj.put("ID", new Integer(id));
    return obj.toString();
  }
  }}}
  Please refer [MappingBetweenJSONAndJavaEntities Mapping Between JSON and Java Entities] for more information.